/*计算机 2252429 蔡宇轩*/
#pragma once
#include<iostream>
#include<fstream>
#include<iomanip>
#include<string>
using namespace std;

struct Code {
	int code;//Huffman编码的值
	int length;//Huffman编码的长度
};

class JPEG {
public:
	UINT img_width;
	UINT img_height;
	BYTE* data;//原始读入的RGBA数据
	char* Picname;//原始文件名
	ofstream outfile;//写入压缩文件的文件输入流
private:
	string outstr;
	int bitcount = 0;//当前已有的比特位数，每满8位输出1次
	char byte = 0;//向文件中写入的字节
	
	Code Y_dc[16] = { 0 };//Y-DC哈夫曼编码表
	Code C_dc[16] = { 0 };//cbcr-DC哈夫曼编码表
	Code Y_ac[256] = { 0 };//Y-AC哈夫曼编码表
	Code C_ac[256] = { 0 };//cbcr-ACh哈夫曼编码表
	Code* HuffTable[4] = { Y_dc,C_dc,Y_ac,C_ac };//4个哈夫曼表的索引表
	Code* AC_table[2] = { Y_ac,C_ac };//AC对应的哈夫曼表索引
	Code* DC_table[2] = { Y_dc,C_dc };//DC对应的哈夫曼表索引
	const int Y_flag = 0;//preflag可以共用
	const int C_flag = 1;//preflag可以共用
	const int Cr_pre_flag = 2;
	int preDC[3] = { 0 };//preDC[0]-Y,preDC[1]-Cb,preDC[2]-Cr
	//标准量化系数表Y
	const unsigned char Luminance_Quantization_Table[64] =
	{
		16,11,10,16,24,40,51,61,
		12,12,14,19,26,58,60,55,
		14,13,16,24,40,57,69,56,
		14,17,22,29,51,87,80,62,
		18,22,37,56,68,109,103,77,
		24,35,55,64,81,104,113,92,
		49,64,78,87,103,121,120,101,
		72,92,95,98,112,100,103,99
	};
	//标准量化系数表cbcr
	const unsigned char Chrominance_Quantization_Table[64] =
	{
		 17,18,24,47,99,99,99,99,
		 18,21,26,66,99,99,99,99,
		 24,26,56,99,99,99,99,99,
		 47,66,99,99,99,99,99,99,
		 99,99,99,99,99,99,99,99,
		 99,99,99,99,99,99,99,99,
		 99,99,99,99,99,99,99,99,
		 99,99,99,99,99,99,99,99
	};
	const int ZigzagMat[64] = {
		 0, 1, 5, 6,14,15,27,28,
		 2, 4, 7,13,16,26,29,42,
		 3, 8,12,17,25,30,41,43,
		 9,11,18,24,31,40,44,53,
		10,19,23,32,39,45,52,54,
		20,22,33,38,46,51,55,60,
		21,34,37,47,50,56,59,61,
		35,36,48,49,57,58,62,63
	};
	const int data_length = 64;
	//YCbCr的ACDC表
	//Y-DC
	const unsigned char DC_Y_NRCodes[16] = { 0,1,5,1,1,1,1,1,1 };
	const unsigned char DC_Y_Values[16] = { 0,1,2,3,4,5,6,7,8,9,10,11 };
	//C-DC
	const unsigned char DC_C_NRCodes[16] = { 0,3,1,1,1,1,1,1,1,1,1 };
	const unsigned char DC_C_Values[16] = { 0,1,2,3,4,5,6,7,8,9,10,11 };
	//Y-AC
	const unsigned char AC_Y_NRCodes[16] = { 0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125 };
	const unsigned char AC_Y_Values[256] =
	{
		0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,0x22,0x71,0x14,
		0x32,0x81,0x91,0xa1,0x08,0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16,0x17,0x18,0x19,
		0x1a,0x25,0x26,0x27,0x28,0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x53,0x54,
		0x55,0x56,0x57,0x58,0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x83,0x84,
		0x85,0x86,0x87,0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,
		0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,
		0xd8,0xd9,0xda,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa
	};
	//C-AC
	const unsigned char AC_C_NRCodes[16] = { 0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119 };
	const unsigned char AC_C_Values[256] =
	{
		0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,
		0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0,0x15,0x62,0x72,0xd1,0x0a,0x16,0x24,0x34,0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,0x27,0x28,0x29,0x2a,0x35,0x36,
		0x37,0x38,0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x73,0x74,
		0x75,0x76,0x77,0x78,0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,
		0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,
		0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9, 0xfa
	};
	const unsigned char* ValuesPtr[4] = { DC_Y_Values,DC_C_Values,AC_Y_Values,AC_C_Values };
	//得到一个数字code的第length位的值
	int GetBit(unsigned int code, int length);
	//写入一个字长的数据时需要高低位互换
	void write_word(int word,ofstream& outfile);
	//打表，写入文件头
	void writeJPEGhead(ofstream& outfile);
	//打表，写入文件尾
	void writeJPEGtail(ofstream& outfile);
	//色彩通道转换，从rgba转换为Ycbcr
	void cgto_YCbCr(BYTE* RGBbuffer,double Ydata[],double Cbdata[],double Crdata[]);
	//傅里叶DCT变换、量化处理并zigzag到一维数组里
	void cgto_DCT(double data[], int dct_data[], const unsigned char QuantTable[]);
	//建立四张ACDC表的哈夫曼编码表
	void BuildHuffTable();
	//DC编码过程
	void DC_bitcnt(int TABLEFLAG, int dct_z_data, Code HuffCode[], int& index,int PREFLAG);
	//AC编码过程
	void AC_bitcnt(int TABLEFLAG, int eob, int dct_z_data[], Code* HuffCode, int& index);
	//Huffman编码
	int Huff_encoding(int flagtable,int dct_data[],Code HuffCode[],int PREFLAG);
	//写入比特流文件
	void write_bits(Code HuffCode[], const int index);
public:
	//构造函数
	JPEG(BYTE* readData,UINT readWidth,UINT readHeight,char readName[]) {
		img_width = readWidth;
		img_height = readHeight;
		data = readData;
		Picname = readName;
	}
	//析构函数
	~JPEG(){};
	//压缩函数
	void MyCompress();
};
